import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import { AnalysisResponse } from '@/types/analysis';

interface AnalysisResultsProps {
  analysis: AnalysisResponse | null;
  isLoading: boolean;
  error: string | null;
}

export function AnalysisResults({ analysis, isLoading, error }: AnalysisResultsProps) {
  if (isLoading) {
    return (
      <Card className="w-full max-w-4xl mx-auto">
        <CardHeader>
          <CardTitle>Analyzing Startup...</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
            <Skeleton className="h-4 w-1/2" />
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="w-full max-w-4xl mx-auto border-red-200 bg-red-50">
        <CardHeader className="text-red-600">
          <CardTitle>Error</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-red-600">{error}</p>
        </CardContent>
      </Card>
    );
  }

  if (!analysis) {
    return (
      <Card className="w-full max-w-4xl mx-auto">
        <CardHeader>
          <CardTitle>No Analysis Available</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Submit a startup pitch to see the analysis results.</p>
        </CardContent>
      </Card>
    );
  }

  const { combined_analysis, committee_debate, recommendations } = analysis;

  const getVerdictColor = (verdict: string) => {
    switch (verdict?.toUpperCase()) {
      case 'STRONG_INVEST':
      case 'INVEST':
        return 'bg-green-100 text-green-800';
      case 'CONSIDER':
        return 'bg-yellow-100 text-yellow-800';
      case 'HIGH_RISK':
        return 'bg-orange-100 text-orange-800';
      case 'PASS':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getVerdictLabel = (verdict: string) => {
    switch (verdict?.toUpperCase()) {
      case 'STRONG_INVEST':
        return 'Strong Investment';
      case 'INVEST':
        return 'Invest';
      case 'CONSIDER':
        return 'Consider';
      case 'HIGH_RISK':
        return 'High Risk';
      case 'PASS':
        return 'Pass';
      default:
        return verdict || 'Unknown';
    }
  };

  return (
    <div className="space-y-8">
      {/* Verdict Card */}
      <Card>
        <CardHeader className="pb-2">
          <div className="flex justify-between items-center">
            <CardTitle>Investment Verdict</CardTitle>
            <Badge className={getVerdictColor(combined_analysis.verdict)}>
              {getVerdictLabel(combined_analysis.verdict)}
            </Badge>
          </div>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">
            {combined_analysis.summary || 'No summary available.'}
          </p>
        </CardContent>
      </Card>

      {/* Key Metrics */}
      <Card>
        <CardHeader>
          <CardTitle>Key Metrics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {combined_analysis.metrics?.map((metric, index) => (
              <div key={index} className="border rounded-lg p-4">
                <h4 className="font-medium text-sm text-muted-foreground">
                  {metric.name}
                </h4>
                <p className="text-2xl font-bold">{metric.value}</p>
                {metric.trend && (
                  <div className="text-sm mt-1">
                    <span className={metric.trend > 0 ? 'text-green-600' : 'text-red-600'}>
                      {metric.trend > 0 ? '↑' : '↓'} {Math.abs(metric.trend)}%
                    </span>
                    <span className="text-muted-foreground text-xs ml-2">vs industry</span>
                  </div>
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Detailed Analysis */}
      <Card>
        <CardHeader>
          <CardTitle>Detailed Analysis</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {combined_analysis.sections?.map((section, index) => (
              <div key={index}>
                <h3 className="text-lg font-medium mb-2">{section.title}</h3>
                <p className="text-muted-foreground">{section.content}</p>
                {section.items && (
                  <ul className="list-disc pl-5 mt-2 space-y-1">
                    {section.items.map((item, i) => (
                      <li key={i} className="text-muted-foreground">
                        {item}
                      </li>
                    ))}
                  </ul>
                )}
                {index < combined_analysis.sections.length - 1 && <Separator className="my-4" />}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Committee Debate */}
      {committee_debate && committee_debate.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Committee Discussion</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {committee_debate.map((comment, index) => (
                <div key={index} className="border-l-4 pl-4 py-2 border-primary/20">
                  <div className="flex items-center space-x-2 mb-1">
                    <span className="font-medium">{comment.member}</span>
                    <Badge variant="outline" className="text-xs">
                      {comment.role}
                    </Badge>
                  </div>
                  <p className="text-muted-foreground">{comment.comment}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Recommendations */}
      {recommendations && recommendations.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Recommendations</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2">
              {recommendations.map((rec, index) => (
                <li key={index} className="flex items-start">
                  <span className="mr-2">•</span>
                  <span>{rec}</span>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

export default AnalysisResults;
