import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Link, useLocation, useNavigate } from 'react-router-dom';
import { AnalysisResponse } from './types/analysis';
import { InvestmentCommitteeResponse } from './types/analysis';
import { analyzeDeal, simulateInvestmentCommittee } from './services/backend';
import Header from './components/Header';
import DealInput from './components/DealInput';
import LoadingSpinner from './components/LoadingSpinner';
import Welcome from './components/Welcome';
import AnalysisResults from './components/analysis/AnalysisResults';
import InvestmentCommittee from './components/analysis/InvestmentCommittee';
import FinancePage from './pages/finance';

// Navigation Component
const Navigation: React.FC = () => {
  const location = useLocation();
  
  return (
    <nav className="bg-slate-900 text-white p-4">
      <div className="container mx-auto flex justify-between items-center">
        <Link to="/" className="text-xl font-bold">AI Analyst</Link>
        <div className="space-x-4">
          <Link 
            to="/" 
            className={`px-3 py-2 rounded-md text-sm font-medium ${location.pathname === '/' ? 'bg-slate-700' : 'text-slate-300 hover:bg-slate-700'}`}
          >
            Deal Analysis
          </Link>
          <Link 
            to="/finance" 
            className={`px-3 py-2 rounded-md text-sm font-medium ${location.pathname === '/finance' ? 'bg-slate-700' : 'text-slate-300 hover:bg-slate-700'}`}
          >
            Finance Dashboard
          </Link>
        </div>
      </div>
    </nav>
  );
};

// DealAnalysis Component
const DealAnalysis: React.FC = () => {
  const [analysis, setAnalysis] = useState<AnalysisResponse | null>(null);
  const [committeeData, setCommitteeData] = useState<InvestmentCommitteeResponse | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState<boolean>(false);
  const [activeTab, setActiveTab] = useState<'analysis' | 'committee'>('analysis');
  const navigate = useNavigate();

  // Handle committee simulation
  const handleCommitteeSimulation = async (pitch: string) => {
    if (!pitch.trim()) {
      setError("Please provide a startup pitch or description.");
      return;
    }

    setIsLoading(true);
    setError(null);
    setActiveTab('committee');

    try {
      const result = await simulateInvestmentCommittee(pitch);
      setCommitteeData(result);
    } catch (error) {
      console.error('Error running committee simulation:', error);
      setError(error instanceof Error ? error.message : 'Failed to run committee simulation');
    } finally {
      setIsLoading(false);
    }
  };

  // Handle analysis submission
  const handleAnalyze = async (pitch: string) => {
    if (!pitch.trim()) {
      setError("Please provide a startup pitch or description.");
      return;
    }

    setIsLoading(true);
    setIsAnalyzing(true);
    setError(null);
    setAnalysis(null);
    setCommitteeData(null);
    setActiveTab('analysis');

    try {
      // Start multi-agent workflow
      console.log('Starting multi-agent analysis workflow...');

      // Run regular deal analysis
      console.log('Agent 1: Running deal analysis...');
      const result = await analyzeDeal(pitch);

      // Run investment committee simulation
      console.log('Agent 2: Running investment committee simulation...');
      const committeeResult = await simulateInvestmentCommittee(pitch);

      // Transform the response to match the expected AnalysisResponse type
      const analysisResponse: AnalysisResponse = {
        analysisId: `analysis_${Date.now()}`,
        status: 'completed',
        startTime: new Date().toISOString(),
        durationSeconds: 0,
        agents: {
          market_analyst: {
            success: true,
            data: { summary: 'Market analysis completed' },
            confidence: result.confidence / 100
          },
          financial_analyst: {
            success: true,
            data: { summary: 'Financial analysis completed' },
            confidence: result.confidence / 100
          },
          team_analyst: {
            success: true,
            data: { summary: 'Team analysis completed' },
            confidence: result.confidence / 100
          },
          risk_analyst: {
            success: true,
            data: { summary: 'Risk analysis completed' },
            confidence: result.confidence / 100
          },
          committee_simulator: {
            success: true,
            data: {
              summary: 'Investment committee simulation completed',
              committee_verdict: committeeResult.final_verdict,
              consensus_score: committeeResult.consensus_score,
              member_count: committeeResult.committee_members.length
            },
            confidence: committeeResult.consensus_score
          }
        },
        finalVerdict: {
          recommendation: result.verdict === 'Invest' ? 'INVEST' :
                         result.verdict === 'Pass' ? 'PASS' : 'CONSIDER',
          confidence: result.confidence / 100,
          confidenceLabel: `${result.confidence}%`,
          reasons: result.recommendations || ['No specific reasons provided'],
          timestamp: new Date().toISOString()
        },
        summary: {
          keyInsights: result.opportunities || [],
          strengths: [],
          concerns: result.risks || [],
          recommendations: result.recommendations || []
        }
      };

      setAnalysis(analysisResponse);
      setCommitteeData(committeeResult);
      console.log('Multi-agent workflow completed successfully!');
    } catch (error) {
      console.error('Error in multi-agent workflow:', error);
      setError(error instanceof Error ? error.message : 'Failed to complete analysis workflow');
    } finally {
      setIsLoading(false);
      setIsAnalyzing(false);
    }
  };

  return (
    <div className="min-h-screen bg-slate-100">
      <Header />
      <main className="container mx-auto px-4 py-8 md:p-8 max-w-6xl">
        {/* Input Section */}
        <div className="transition-opacity duration-300">
          <DealInput 
            onAnalyze={handleAnalyze} 
            isLoading={isLoading} 
            disabled={isLoading}
          />
        </div>

        {/* Error Message */}
        {error && (
          <div className="mt-6 bg-red-900/50 border border-red-700 text-red-300 px-6 py-4 rounded-lg">
            <p className="font-bold">An Error Occurred</p>
            <p>{error}</p>
          </div>
        )}

        {/* Results Tabs */}
        {(analysis || committeeData) && (
          <div className="mb-6">
            <div className="flex space-x-1 bg-slate-800 p-1 rounded-lg border border-slate-700">
              <button
                onClick={() => setActiveTab('analysis')}
                className={`flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                  activeTab === 'analysis'
                    ? 'bg-blue-600 text-white'
                    : 'text-slate-400 hover:text-slate-300'
                }`}
              >
                ðŸ“Š Analysis Report
              </button>
              <button
                onClick={() => setActiveTab('committee')}
                className={`flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                  activeTab === 'committee'
                    ? 'bg-purple-600 text-white'
                    : 'text-slate-400 hover:text-slate-300'
                }`}
              >
                ðŸ¦ˆ Committee Debate
              </button>
            </div>
          </div>
        )}

        {/* Main Content */}
        <div className="mt-8 space-y-8">
          {/* Analysis in Progress */}
          {isLoading && (
            <div className="mt-8 text-center">
              <LoadingSpinner />
              <p className="mt-4 text-slate-400">
                {activeTab === 'committee' ? 'Simulating investment committee...' : 'Analyzing your startup pitch...'}
              </p>
            </div>
          )}

          {/* Analysis Results */}
          {activeTab === 'analysis' && !isLoading && analysis && (
            <AnalysisResults
              analysis={analysis}
              className="animate-fade-in"
            />
          )}

          {/* Committee Simulation Results */}
          {activeTab === 'committee' && !isLoading && committeeData && (
            <InvestmentCommittee
              committeeData={committeeData}
              className="animate-fade-in"
            />
          )}

          {/* Welcome Screen */}
          {!isLoading && !analysis && !committeeData && !error && (
            <Welcome />
          )}
        </div>
      </main>
      <footer className="text-center p-4 text-slate-600 text-sm">
        <p>Dealflow Oracle &copy; 2025 - For Hackathon Purposes Only</p>
      </footer>
    </div>
  );
};

// Main App Component
const App: React.FC = () => {
  return (
    <Router>
      <div className="min-h-screen bg-slate-100">
        <Navigation />
        <Routes>
          <Route path="/" element={<DealAnalysis />} />
          <Route path="/finance" element={<FinancePage />} />
        </Routes>
      </div>
    </Router>
  );
};

// Add some global styles for animations
const style = document.createElement('style');
style.textContent = `
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  .animate-fade-in {
    animation: fadeIn 0.3s ease-out forwards;
  }
`;
document.head.appendChild(style);

export default App;
